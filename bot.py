import asyncio
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from config.settings import settings
from utils.logger import logger
from middlewares.throttling import ThrottlingMiddleware
from middlewares.logging_middleware import LoggingMiddleware
from states.user_states import UserStates

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from routers import commands
from routers.handlers import facts_handlers, jokes_handlers, favorites_handlers

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not settings.BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=settings.BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
    dp.message.middleware(LoggingMiddleware())
    dp.callback_query.middleware(LoggingMiddleware())
    dp.message.middleware(ThrottlingMiddleware())
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(commands.router)
    dp.include_router(facts_handlers.router)
    dp.include_router(jokes_handlers.router)
    dp.include_router(favorites_handlers.router)
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏)
    @dp.message(UserStates.waiting_for_name_prediction)
    async def handle_name_input(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        from routers.handlers.facts_handlers import handle_name_prediction
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        prediction_type = data.get("prediction_type", "age")
        
        await handle_name_prediction(message, prediction_type)
        await state.clear()
    
    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã)
    @dp.message(F.text.startswith("/age"))
    async def age_prediction_command(message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        await state.set_state(UserStates.waiting_for_name_prediction)
        await state.update_data(prediction_type="age")
        await message.answer("üéÇ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞:")
    
    @dp.message(F.text.startswith("/gender"))
    async def gender_prediction_command(message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–∞"""
        await state.set_state(UserStates.waiting_for_name_prediction)
        await state.update_data(prediction_type="gender")
        await message.answer("üë´ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–∞:")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    @dp.message()
    async def unknown_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        from keyboards.inline import get_main_menu
        
        await message.answer(
            "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
            "/catfact - —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö\n"
            "/joke - —à—É—Ç–∫–∞\n"
            "/randomfact - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç",
            reply_markup=get_main_menu()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ï—â–µ —Ä–∞–∑"
    @dp.callback_query(F.data.in_(["catfact", "joke", "randomfact"]))
    async def repeat_content_callback(callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content_type = callback.data
        
        if content_type == "catfact":
            from routers.handlers.facts_handlers import handle_cat_fact
            await handle_cat_fact(callback)
        elif content_type == "joke":
            from routers.handlers.jokes_handlers import handle_joke
            await handle_joke(callback)
        elif content_type == "randomfact":
            from routers.handlers.facts_handlers import handle_random_fact
            await handle_random_fact(callback)
        
        await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    def setup_content_saving():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        from routers.handlers.favorites_handlers import save_last_content
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        original_cat_fact = facts_handlers.handle_cat_fact
        original_joke = jokes_handlers.handle_joke
        original_random_fact = facts_handlers.handle_random_fact
        
        async def cat_fact_with_save(message_or_callback):
            await original_cat_fact(message_or_callback)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        async def joke_with_save(message_or_callback):
            await original_joke(message_or_callback)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        async def random_fact_with_save(message_or_callback):
            await original_random_fact(message_or_callback)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        facts_handlers.handle_cat_fact = cat_fact_with_save
        jokes_handlers.handle_joke = joke_with_save
        facts_handlers.handle_random_fact = random_fact_with_save
    
    setup_content_saving()
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        # –£–¥–∞–ª—è–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)